// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  walletAddress String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
  gamePlays     GamePlay[]
  gameScores    GameScore[]

  // User profile information
  username     String?   @unique
  avatar       String?   // IPFS hash or URL
  bio          String?
  NFTid        String?

  // Game-related relations
  userGames     UserGame[]
  createdEvents GameEvent[]
  eventParticipations EventParticipant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New models for user profile tracking

model Transaction {
  id            String   @id @default(cuid())
  userId        String
  type          String   // "PAYMENT", "REWARD", etc.
  amount        Float
  tokenSymbol   String   @default("REALM")
  txHash        String?  // Blockchain transaction hash
  status        String   // "PENDING", "COMPLETED", "FAILED"
  description   String?
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Game model to store game information
model Game {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  imagePath     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  gamePlays     GamePlay[]
  gameScores    GameScore[]
  
  // Relations
  gameEvents    GameEvent[]
  userGames     UserGame[]
  
  @@index([slug])
  @@index([isActive])
}

// GameEvent model to store game-related events
model GameEvent {
  id            String    @id @default(cuid())
  title         String
  description   String
  imageUrl      String
  startTime     DateTime
  endTime       DateTime?
  location      String?   // Could be "online" or a physical location
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  gameId        String
  game          Game      @relation(fields: [gameId], references: [id])
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])
  participants  EventParticipant[]
  
  @@index([startTime])
  @@index([isActive])
  @@index([gameId])
}

// EventParticipant model to track event participation
model EventParticipant {
  id            String    @id @default(cuid())
  status        String    // "registered", "attended", "completed"
  registeredAt  DateTime  @default(now())
  
  // Relations
  eventId       String
  event         GameEvent @relation(fields: [eventId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  @@unique([eventId, userId])
}

// UserGame model to track user game progress and achievements
model UserGame {
  id            String    @id @default(cuid())
  score         Int       @default(0)
  highScore     Int       @default(0)
  playCount     Int       @default(0)
  lastPlayedAt  DateTime?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  gameId        String
  game          Game      @relation(fields: [gameId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  @@unique([gameId, userId])
  @@index([userId])
  @@index([highScore])
}

model GamePlay {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  playedAt  DateTime @default(now())
  duration  Int?     // in seconds
  completed Boolean  @default(false)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model GameScore {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  score     Int
  metadata  Json?    // Additional game-specific data
  achievedAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

